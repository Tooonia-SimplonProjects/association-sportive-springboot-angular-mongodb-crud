{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { Gymnase } from './gymnase.model';\nimport { Seance } from './seance.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GymnaseService {\n  // l'injection de dépendance. J'injecte une instance de HttpClient\n  constructor(http) {\n    this.http = http; // j'initialise ma propriété gymnaseUrl avec la valeur donnée\n\n    this.gymnasesUrl = 'http://localhost:8080/associationsportive/gymnases';\n  } // Je déclare cette méthode que je peux appeler comme je veux\n\n\n  findAll() {\n    // this.http.get me permet de faire une requete Http avec la methode GET,\n    // qui me retournera un Observable (=un objet asyncrone)\n    // , et donc la réponse de l'Observable sera un tableau de gymnase\n    // en format JSON.\n    return this.http.get(this.gymnasesUrl).pipe(map(rawData => rawData.map(itemGymnase => new Gymnase(itemGymnase.id, itemGymnase.idGymnase, itemGymnase.nomGymnase, itemGymnase.adresse, itemGymnase.ville, itemGymnase.surface, itemGymnase.seances.map(seance => new Seance( // entraineurId prendra la valeur de idSportifEntraieneur q je récumere de mon API\n    seance.idSportifEntraineur, seance.jour, seance.horaire, seance.duree, seance.libelle))))));\n  }\n\n  findOne(id) {\n    // si je veux q cette valeur id soit stocké dans mon service, alors oui,\n    // le déclarer ici ainsi:\n    // this.idGymnase = id;\n    return this.http.get(`${this.gymnasesUrl}/${id}`).pipe( // le 2eme map s utilise sur un tableau\n    // map((rawData:any) => rawData.map(itemGymnase => new Gymnase(\n    map(rawData => new Gymnase(rawData.id, rawData.idGymnase, rawData.nomGymnase, rawData.adresse, rawData.ville, rawData.surface, rawData.seances.map(seance => new Seance(seance.idSportifEntraineur, seance.jour, seance.horaire, seance.duree, seance.libelle)))));\n  }\n\n}\n\nGymnaseService.ɵfac = function GymnaseService_Factory(t) {\n  return new (t || GymnaseService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nGymnaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GymnaseService,\n  factory: GymnaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\tooon\\Documents\\Tooonia\\SimplonWebDev\\Front-end\\association-sportive\\src\\app\\gymnase.service.ts"],"names":[],"mappings":"AAGA,SAAS,GAAT,QAAoB,gBAApB;AACA,SAAS,OAAT,QAAwB,iBAAxB;AACA,SAAS,MAAT,QAAuB,gBAAvB;;;AAKA,OAAM,MAAO,cAAP,CAAqB;AAMzB;AACA,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA,CAAgB,CAClC;;AACA,SAAK,WAAL,GAAmB,oDAAnB;AACD,GAVwB,CAYzB;;;AACO,EAAA,OAAO,GAAA;AACZ;AACA;AACA;AACA;AAEA,WAAO,KAAK,IAAL,CAAU,GAAV,CAAyB,KAAK,WAA9B,EAA2C,IAA3C,CACL,GAAG,CAAE,OAAD,IAAmB,OAAO,CAAC,GAAR,CAAY,WAAW,IAAI,IAAI,OAAJ,CAChD,WAAW,CAAC,EADoC,EAEhD,WAAW,CAAC,SAFoC,EAGhD,WAAW,CAAC,UAHoC,EAIhD,WAAW,CAAC,OAJoC,EAKhD,WAAW,CAAC,KALoC,EAMhD,WAAW,CAAC,OANoC,EAOhD,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAyB,MAAD,IAAgB,IAAI,MAAJ,EACtC;AACA,IAAA,MAAM,CAAC,mBAF+B,EAGtC,MAAM,CAAC,IAH+B,EAItC,MAAM,CAAC,OAJ+B,EAKtC,MAAM,CAAC,KAL+B,EAMtC,MAAM,CAAC,OAN+B,CAAxC,CAPgD,CAA3B,CAApB,CADE,CAAP;AAkBD;;AAEM,EAAA,OAAO,CAAC,EAAD,EAAU;AACtB;AACA;AACA;AACA,WAAO,KAAK,IAAL,CAAU,GAAV,CAAuB,GAAG,KAAK,WAAW,IAAI,EAAE,EAAhD,EAAoD,IAApD,EACL;AACA;AACA,IAAA,GAAG,CAAE,OAAD,IAAiB,IAAI,OAAJ,CACnB,OAAO,CAAC,EADW,EAEnB,OAAO,CAAC,SAFW,EAGnB,OAAO,CAAC,UAHW,EAInB,OAAO,CAAC,OAJW,EAKnB,OAAO,CAAC,KALW,EAMnB,OAAO,CAAC,OANW,EAOnB,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAqB,MAAD,IAAgB,IAAI,MAAJ,CAClC,MAAM,CAAC,mBAD2B,EAElC,MAAM,CAAC,IAF2B,EAGlC,MAAM,CAAC,OAH2B,EAIlC,MAAM,CAAC,KAJ2B,EAKlC,MAAM,CAAC,OAL2B,CAApC,CAPmB,CAAlB,CAHE,CAAP;AAmBD;;AA9DwB;;;mBAAd,c,EAAc,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAd,c;AAAc,EAAA,OAAA,EAAd,cAAc,CAAA,I;AAAA,EAAA,UAAA,EAFb","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Gymnase } from './gymnase.model';\nimport { Seance } from './seance.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GymnaseService {\n\n  // je peux aussi mettre directement ici la valeur de l'url\n  private gymnasesUrl: string;\n  private gymnase: string | undefined;\n  private idGymnase: string | undefined;\n  // l'injection de dépendance. J'injecte une instance de HttpClient\n  constructor(private http: HttpClient) {\n    // j'initialise ma propriété gymnaseUrl avec la valeur donnée\n    this.gymnasesUrl = 'http://localhost:8080/associationsportive/gymnases';\n  }\n\n  // Je déclare cette méthode que je peux appeler comme je veux\n  public findAll(): Observable<Gymnase[]> {\n    // this.http.get me permet de faire une requete Http avec la methode GET,\n    // qui me retournera un Observable (=un objet asyncrone)\n    // , et donc la réponse de l'Observable sera un tableau de gymnase\n    // en format JSON.\n\n    return this.http.get<Gymnase[]>(this.gymnasesUrl).pipe(\n      map((rawData:any[]) => rawData.map(itemGymnase => new Gymnase(\n        itemGymnase.id,\n        itemGymnase.idGymnase,\n        itemGymnase.nomGymnase,\n        itemGymnase.adresse,\n        itemGymnase.ville,\n        itemGymnase.surface,\n        itemGymnase.seances.map((seance:any) => new Seance(\n          // entraineurId prendra la valeur de idSportifEntraieneur q je récumere de mon API\n          seance.idSportifEntraineur,\n          seance.jour,\n          seance.horaire,\n          seance.duree,\n          seance.libelle\n        ))\n      )))\n    );\n  }\n\n  public findOne(id:string): Observable<Gymnase> {\n    // si je veux q cette valeur id soit stocké dans mon service, alors oui,\n    // le déclarer ici ainsi:\n    // this.idGymnase = id;\n    return this.http.get<Gymnase>(`${this.gymnasesUrl}/${id}`).pipe(\n      // le 2eme map s utilise sur un tableau\n      // map((rawData:any) => rawData.map(itemGymnase => new Gymnase(\n      map((rawData:any) => new Gymnase(\n        rawData.id,\n        rawData.idGymnase,\n        rawData.nomGymnase,\n        rawData.adresse,\n        rawData.ville,\n        rawData.surface,\n        rawData.seances.map((seance:any) => new Seance(\n          seance.idSportifEntraineur,\n          seance.jour,\n          seance.horaire,\n          seance.duree,\n          seance.libelle\n        ))\n      ))\n    );\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}